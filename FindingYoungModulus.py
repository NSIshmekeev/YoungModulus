import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import linregress

# Заданные параметры образца
L = 340  # мм, начальная длина образца
a = 20   # мм, одна сторона поперечного сечения
b = 3    # мм, другая сторона поперечного сечения

# Вычисление площади поперечного сечения
A = a * b  # мм^2

# Имя файла с данными
file_name = 'Data.txt'
# Списки для хранения данных
displacements = []  # перемещение (∆L)
forces = []         # сила (F)

# 1. Чтение данных из файла
try:
    with open(file_name, 'r') as f:
        for line in f:
            try:
                # Разделение строки по запятой и преобразование в числа
                parts = line.strip().split(',')
                if len(parts) == 3:
                    # parts[0] - время (не используется в расчетах, но присутствует в файле)
                    # parts[1] - перемещение
                    # parts[2] - сила
                    displacement = float(parts[1])
                    force = float(parts[2])
                    displacements.append(displacement)
                    forces.append(force)
                else:
                    print(f"Предупреждение: Строка '{line.strip()}' не содержит 3 значения и будет пропущена.")
            except ValueError:
                print(f"Предупреждение: Не удалось преобразовать данные в строке '{line.strip()}' в числа. Строка будет пропущена.")
except FileNotFoundError:
    print(f"Ошибка: Файл '{file_name}' не найден.")
    exit()
except Exception as e:
    print(f"Произошла ошибка при чтении файла: {e}")
    exit()

if not displacements or not forces:
    print("Ошибка: Данные не были загружены из файла. Проверьте формат файла.")
    exit()

# Преобразование списков в массивы NumPy для удобства вычислений
displacements = np.array(displacements)
forces = np.array(forces)

# 2. Построение графика в осях перемещение-сила
plt.figure(figsize=(10, 6))
plt.plot(displacements, forces, marker='.', linestyle='-', color='b')
plt.title('График зависимости Силы от Перемещения')
plt.xlabel('Перемещение (∆L), мм')
plt.ylabel('Сила (F), Н')
plt.grid(True)
plt.show()

# Вычисление деформаций (ε) и напряжений (σ)
# Деформация ε = ∆L / L
strains = displacements / L

# Напряжение σ = F / A
stresses = forces / A # Н/мм^2 (МПа)

# 3. Построение графика в осях деформация-напряжение
plt.figure(figsize=(10, 6))
plt.plot(strains, stresses, marker='.', linestyle='-', color='r')
plt.title('График зависимости Напряжения от Деформации (Диаграмма растяжения)')
plt.xlabel('Деформация (ε), безразмерная')
plt.ylabel('Напряжение (σ), МПа (Н/мм²)')
plt.grid(True)

# 4. Определение модуля Юнга (E)
# Модуль Юнга E = σ / ε. Это тангенс угла наклона начального линейного участка диаграммы напряжение-деформация.
# Для определения модуля Юнга возьмем участок, где наблюдается линейная зависимость.
# Обычно это начальный участок кривой.
# Исключим точки, где напряжение или деформация равны нулю, чтобы избежать деления на ноль или некорректной регрессии,
# если таких точек много в начале.
# Однако, если первая точка (0,0) является частью линейного участка, её можно включить.
# Для более точного определения можно визуально определить линейный участок или использовать критерии.

# Найдем точки, где деформация больше нуля, чтобы избежать проблем с логарифмами или делением на нуль,
# и где напряжения также положительны (хотя в данном случае они должны быть положительны при растяжении).
valid_indices = np.where((strains > 0) & (stresses > 0) & (strains < 0.002)) # Эмпирически подобранный предел для линейного участка

if len(strains[valid_indices]) > 1 and len(stresses[valid_indices]) > 1:
    # Используем линейную регрессию (метод наименьших квадратов) для определения наклона
    slope, intercept, r_value, p_value, std_err = linregress(strains[valid_indices], stresses[valid_indices])
    young_modulus = slope  # Модуль Юнга - это наклон прямой

    print(f"\nРасчетные значения:")
    print(f"Площадь поперечного сечения (A): {A} мм²")
    print(f"Начальная длина (L): {L} мм")

    print(f"\nОпределение модуля Юнга (E):")
    print(f"  Модуль Юнга (E), рассчитанный по линейному участку: {young_modulus:.2f} МПа (Н/мм²)")
    print(f"  Коэффициент детерминации (R^2) для линейной аппроксимации: {r_value**2:.4f}")
    print(f"  Погрешность {std_err}")


    # Добавим линию аппроксимации на график напряжение-деформация
    plt.plot(strains[valid_indices], intercept + slope * strains[valid_indices], 'g--', label=f'Линейная аппроксимация\nE = {young_modulus:.2f} МПа')
    plt.legend()
else:
    print("\nНедостаточно данных на начальном участке для точного определения модуля Юнга с помощью линейной регрессии.")
    print("Пожалуйста, проверьте данные или измените критерии для выбора линейного участка.")

plt.show()

